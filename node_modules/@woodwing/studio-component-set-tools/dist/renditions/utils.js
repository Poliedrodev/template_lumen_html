"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadHtmlRenditions = void 0;
const path = require("path");
const models_1 = require("../models");
function loadHtmlRenditions(componentsDefinition, getFileContent) {
    return __awaiter(this, void 0, void 0, function* () {
        return Object.assign(Object.assign({}, componentsDefinition), { components: yield loadRenditionsForComponents(componentsDefinition.components, getFileContent) });
    });
}
exports.loadHtmlRenditions = loadHtmlRenditions;
function loadRenditionsForComponents(components, getFileContent) {
    return __awaiter(this, void 0, void 0, function* () {
        const enrichedComponents = [];
        for (const compDef of components) {
            if (!hasRendition(compDef, models_1.ComponentRendition.HTML)) {
                enrichedComponents.push(Object.assign(Object.assign({}, compDef), { renditions: yield loadRendition(compDef.name, models_1.ComponentRendition.HTML, getFileContent) }));
            }
        }
        return enrichedComponents;
    });
}
function hasRendition(component, rendition) {
    return Boolean(component.renditions && rendition in component.renditions);
}
function loadRendition(componentName, rendition, getFileContent) {
    return __awaiter(this, void 0, void 0, function* () {
        const renditions = {};
        renditions[rendition] = (yield getFileContent(path.normalize(`templates/${rendition}/${componentName}.html`), {
            encoding: 'utf8',
        }));
        return renditions;
    });
}
//# sourceMappingURL=utils.js.map