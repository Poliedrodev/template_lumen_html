"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listFilesRelativeToFolder = void 0;
const path = require("path");
const fs = require("fs");
function listFilesRelativeToFolder(folderPath) {
    return __awaiter(this, void 0, void 0, function* () {
        folderPath = path.normalize(folderPath);
        // List files, make relative to input folder and normalize.
        return new Set((yield listFilesRecursively(folderPath)).map((p) => path.normalize(p).replace(new RegExp(`^${folderPath.replace(/\\/g, '\\\\')}(/|\\\\)?`), '')));
    });
}
exports.listFilesRelativeToFolder = listFilesRelativeToFolder;
function listFilesRecursively(folderPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileList = [];
        const files = yield fs.promises.readdir(folderPath);
        for (const file of files) {
            const folder = path.join(folderPath, file);
            if ((yield fs.promises.stat(folder)).isDirectory()) {
                fileList.push(...(yield listFilesRecursively(folder)));
            }
            else {
                fileList.push(folder);
            }
        }
        return fileList;
    });
}
//# sourceMappingURL=files.js.map