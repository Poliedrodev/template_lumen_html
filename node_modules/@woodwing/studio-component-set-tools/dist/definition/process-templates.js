"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processTemplates = void 0;
/**
 * Each component may support a number of renditions and must always support the html rendition.
 *
 * These renditions are stored in separate html files. To make the work easy for the editor,
 * these templates are inlined to the processed component set definition.
 */
const components_definition_1 = require("../models/components-definition");
const renditionTypes = Object.values(components_definition_1.ComponentRendition);
function processTemplates(renditionResolver, componentsDefinition) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const templates = loadTemplates(renditionResolver, componentsDefinition);
        for (const component of componentsDefinition.components) {
            component.renditions = {};
            for (const rendition of renditionTypes) {
                component.renditions[rendition] = (_a = (yield templates[rendition][component.name])) !== null && _a !== void 0 ? _a : '';
            }
        }
    });
}
exports.processTemplates = processTemplates;
function loadTemplates(renditionResolver, componentsDefinition) {
    return componentsDefinition.components.reduce((acc, component) => {
        for (const renditionType of renditionTypes) {
            acc[renditionType][component.name] = renditionResolver(`templates/${renditionType}/${component.name}.html`);
        }
        return acc;
    }, initRenditionsComponentTemplates());
}
function initRenditionsComponentTemplates() {
    return renditionTypes.reduce((acc, renditionType) => {
        acc[renditionType] = {};
        return acc;
    }, {});
}
//# sourceMappingURL=process-templates.js.map