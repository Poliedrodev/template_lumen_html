"use strict";
/**
 * Validates:
 * - Whether icons have the correct format
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconsValidator = void 0;
const path = require("path");
const validator_1 = require("./validator");
const pngjs = require("pngjs");
const PNG = pngjs.PNG;
class IconsValidator extends validator_1.Validator {
    constructor(error, definition, getFileContent) {
        super(error, definition);
        this.getFileContent = getFileContent;
        this.supportedFormats = ['.svg', '.png'];
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const component of Object.values(this.componentSet.components)) {
                const ext = path.extname(component.icon).toLowerCase();
                if (this.supportedFormats.indexOf(ext) === -1) {
                    this.error(`Icons are only supported in SVG or transparent PNG format`);
                }
                else if (ext === '.png') {
                    const data = yield this.getFileContent(path.normalize(component.icon));
                    const png = PNG.sync.read(data);
                    if (png.alpha === false) {
                        this.error(`PNG icons are only supported when they are transparent`);
                    }
                }
            }
        });
    }
}
exports.IconsValidator = IconsValidator;
//# sourceMappingURL=icons-validator.js.map