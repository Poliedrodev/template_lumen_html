"use strict";
/**
 * Validates usage of fitting control type
 * - only one per a component
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FittingValidator = void 0;
const validator_1 = require("./validator");
const CONTROL = 'fitting';
class FittingValidator extends validator_1.Validator {
    countPerComponent(component) {
        let amount = 0;
        component.properties.forEach((parsedProperty) => {
            if (parsedProperty.control.type === CONTROL) {
                amount++;
            }
        });
        return amount;
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const component of Object.values(this.componentSet.components)) {
                if (this.countPerComponent(component) > 1) {
                    this.error(`Component "${component.name}" uses properties with "${CONTROL}" control type ` +
                        `more that one time`);
                }
            }
        });
    }
}
exports.FittingValidator = FittingValidator;
//# sourceMappingURL=fitting-validator.js.map