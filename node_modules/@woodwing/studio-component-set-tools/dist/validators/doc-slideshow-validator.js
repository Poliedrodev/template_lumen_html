"use strict";
/**
 * Validates usage of doc-slideshow directive
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocSlideshowValidator = void 0;
const validator_1 = require("./validator");
const models_1 = require("../models");
class DocSlideshowValidator extends validator_1.Validator {
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            Object.values(this.componentSet.components).forEach((component) => {
                const amountOfSlideshows = this.countSlideshowDirectives(component);
                // check if it's the only one
                if (amountOfSlideshows > 1) {
                    this.error(`Component "${component.name}" contains more then one slideshow directive, ` +
                        `only one is allowed per component`);
                }
            });
        });
    }
    countSlideshowDirectives(component) {
        return Object.values(component.directives).reduce((acc, directive) => {
            if (directive.type === models_1.DirectiveType.slideshow) {
                acc++;
            }
            return acc;
        }, 0);
    }
}
exports.DocSlideshowValidator = DocSlideshowValidator;
//# sourceMappingURL=doc-slideshow-validator.js.map