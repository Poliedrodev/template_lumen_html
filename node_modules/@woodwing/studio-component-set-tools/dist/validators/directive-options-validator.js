"use strict";
/**
 * Validates directiveOptions entries have a matching directive in the template
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectiveOptionsValidator = void 0;
const validator_1 = require("./validator");
class DirectiveOptionsValidator extends validator_1.Validator {
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const component of Object.values(this.componentSet.components)) {
                this.validateComponent(component);
            }
        });
    }
    /**
     * Validates whether directiveOptions entries have a matching directive
     */
    validateComponent(component) {
        if (!component.directiveOptions) {
            return;
        }
        for (const key of Object.keys(component.directiveOptions)) {
            this.validateDirectiveOption(key, component);
        }
    }
    validateDirectiveOption(directiveKey, component) {
        if (!component.directives[directiveKey]) {
            this.error(`Component "${component.name}" has directive options for an unknown directive "${directiveKey}".`);
        }
    }
}
exports.DirectiveOptionsValidator = DirectiveOptionsValidator;
//# sourceMappingURL=directive-options-validator.js.map