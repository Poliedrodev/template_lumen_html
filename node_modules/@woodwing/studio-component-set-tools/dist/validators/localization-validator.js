"use strict";
/**
 * Validates:
 * - Localization files being present and valid json
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalizationValidator = void 0;
const path = require("path");
const validator_1 = require("./validator");
// Languages supported by Enterprise Server
const supportedLanguages = [
    'csCZ',
    'deDE',
    'enUS',
    'esES',
    'frFR',
    'itIT',
    'jaJP',
    'koKR',
    'nlNL',
    'plPL',
    'ptBR',
    'ruRU',
    'zhCN',
    'zhTW',
    'fiFI',
];
class LocalizationValidator extends validator_1.Validator {
    constructor(error, definition, filePaths, getFileContent) {
        super(error, definition);
        this.filePaths = filePaths;
        this.getFileContent = getFileContent;
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const localizationFile of this.getLocalizationFiles()) {
                yield this.validateLocalizationFile(localizationFile);
            }
        });
    }
    validateLocalizationFile(localizationFile) {
        return __awaiter(this, void 0, void 0, function* () {
            const localizationFileParsed = path.parse(localizationFile);
            // Ignore non json files
            if (localizationFileParsed.ext !== '.json') {
                return;
            }
            if (!supportedLanguages.includes(localizationFileParsed.name)) {
                this.error(`Localization file "${localizationFile}" is not a supported language. Supported languages: \n${supportedLanguages}`);
                return;
            }
            try {
                JSON.parse((yield this.getFileContent(localizationFile)));
            }
            catch (e) {
                this.error(`Localization file "${localizationFile}" is not valid json: \n${e}`);
                return;
            }
        });
    }
    getLocalizationFiles() {
        return [...this.filePaths].filter((filePath) => filePath.startsWith('localization'));
    }
}
exports.LocalizationValidator = LocalizationValidator;
//# sourceMappingURL=localization-validator.js.map