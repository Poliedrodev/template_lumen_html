"use strict";
/**
 * Validates if autofill rules are correct
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutofillValidator = void 0;
const validator_1 = require("./validator");
const models_1 = require("../models");
const supportedDestinationDirectives = [models_1.DirectiveType.editable, models_1.DirectiveType.link];
const supportedSourceDirectives = [models_1.DirectiveType.image];
class AutofillValidator extends validator_1.Validator {
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            Object.values(this.componentSet.components).forEach((component) => {
                this.validateComponent(component);
            });
        });
    }
    /**
     * Validates autofill setting of components.
     * - Should have a valid destination directive
     * - Should have a valid source directive
     * - metadata field should set for image type
     * - destination should not be source
     *
     * @param errorReporter
     * @param component
     */
    validateComponent(component) {
        // Only check when it has directiveOptions configured
        if (!component.directiveOptions) {
            return;
        }
        for (const [dstKey, directiveOptions] of Object.entries(component.directiveOptions)) {
            // Only for directives with autofill
            if (!directiveOptions.autofill) {
                continue;
            }
            const rule = directiveOptions.autofill;
            // check if destination directive exists
            if (!component.directives[dstKey]) {
                this.error(`Component "${component.name}" has incorrect autofill rule "${dstKey}". ` +
                    `This component doesn't have directive "${dstKey}".`);
            }
            else if (supportedDestinationDirectives.indexOf(component.directives[dstKey].type) < 0) {
                this.error(`Component "${component.name}" has incorrect autofill rule "${dstKey}". ` +
                    `Supported types of destination directive are "${supportedDestinationDirectives.join('", "')}" only.`);
            }
            // check if source directive exists
            if (!component.directives[rule.source]) {
                this.error(`Component "${component.name}" has incorrect autofill rule "${dstKey}". ` +
                    `This component doesn't have directive "${rule.source}".`);
                // Check if source directive is supported
            }
            else if (supportedSourceDirectives.indexOf(component.directives[rule.source].type) < 0) {
                this.error(`Component "${component.name}" has incorrect autofill rule "${dstKey}". ` +
                    `Supported types of source directive are "${supportedSourceDirectives.join('", "')}" only.`);
                // check if metadataField is set when source directive is image kind
            }
            else if (component.directives[rule.source].type === models_1.DirectiveType.image && !('metadataField' in rule)) {
                this.error(`Component "${component.name}" has incorrect autofill rule "${dstKey}". ` +
                    `If source directive is image kind then "metadataField" must be set.`);
            }
            // check if dst !== src
            if (dstKey === rule.source) {
                this.error(`Component "${component.name}" has incorrect autofill rule "${dstKey}". ` +
                    `There is no sense to fill directive content from itself.`);
            }
        }
    }
}
exports.AutofillValidator = AutofillValidator;
//# sourceMappingURL=autofill-validator.js.map