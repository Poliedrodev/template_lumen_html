"use strict";
/**
 * Validates if scripts files are present
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptsValidator = void 0;
const path = require("path");
const validator_1 = require("./validator");
class ScriptsValidator extends validator_1.Validator {
    constructor(error, definition, filePaths) {
        super(error, definition);
        this.filePaths = filePaths;
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.componentSet.scripts) {
                for (const scriptPath of this.componentSet.scripts) {
                    if (!this.filePaths.has(path.normalize(scriptPath))) {
                        this.error(`Script "${scriptPath}" does not exist`);
                    }
                }
            }
        });
    }
}
exports.ScriptsValidator = ScriptsValidator;
//# sourceMappingURL=scripts-validator.js.map