"use strict";
/**
 * Validates:
 * - if properties which works with directives only have a reference to a directive
 * - if all properties whose dataType=doc-* have a reference to a directive
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectivePropertiesValidator = void 0;
const validator_1 = require("./validator");
const models_1 = require("../models");
const CONTROLS = ['image-editor', 'interactive', 'media-properties'];
class DirectivePropertiesValidator extends validator_1.Validator {
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const regexp = new RegExp(`^doc-(${Object.values(models_1.DirectiveType)
                .filter((item) => item !== models_1.DirectiveType.unknown)
                .join('|')})`, 'i');
            for (const component of Object.values(this.componentSet.components)) {
                component.properties.forEach((parsedProperty) => {
                    if (CONTROLS.indexOf(parsedProperty.control.type) >= 0 && !parsedProperty.directiveKey) {
                        this.error(`Property "${parsedProperty.name}" of component "${component.name}" must reference ` +
                            `to a directive`);
                    }
                    // check all dataType=doc-* properties
                    if (regexp.test(parsedProperty.dataType) && !parsedProperty.directiveKey) {
                        this.error(`Property "${parsedProperty.name}" of component "${component.name}" must reference ` +
                            `to a directive because its dataType is a directive type`);
                    }
                });
            }
        });
    }
}
exports.DirectivePropertiesValidator = DirectivePropertiesValidator;
//# sourceMappingURL=directive-properties-validator.js.map