"use strict";
/**
 * Validates components
 * - if names are unique
 * - if icons are present
 * - if templates are present
 * - if styles are present
 * - also if generic styles are present: design.scss, design.css, _common.scss
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentsValidator = void 0;
const path = require("path");
const validator_1 = require("./validator");
const RESERVED = [/^__internal__/];
const GENERIC_FILES = [
    path.normalize('styles/_common.scss'),
    path.normalize('styles/design.scss'),
    path.normalize('styles/design.css'),
];
class ComponentsValidator extends validator_1.Validator {
    constructor(error, definition, filePaths) {
        super(error, definition);
        this.filePaths = filePaths;
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const componentNames = new Set();
            for (const comp of Object.values(this.componentSet.components)) {
                // reserved words
                if (RESERVED.some((regexp) => regexp.test(comp.name))) {
                    this.error(`Component name "${comp.name}" is a reserved word`);
                }
                // Validate we have not seen the name yet
                if (componentNames.has(comp.name)) {
                    this.error(`Component "${comp.name}" is not unique`);
                }
                componentNames.add(comp.name);
                // Validate the component has an icon
                if (!this.filePaths.has(path.normalize(comp.icon))) {
                    this.error(`Component "${comp.name}" icon missing "${comp.icon}"`);
                }
                // Validate the component has a html template
                const htmlTemplatePath = path.normalize(`templates/html/${comp.name}.html`);
                if (!this.filePaths.has(htmlTemplatePath)) {
                    this.error(`Component "${comp.name}" html template missing "${htmlTemplatePath}"`);
                }
                // Validate the component has a style
                const componentStylePath = path.normalize(`styles/_${comp.name}.scss`);
                if (!this.filePaths.has(componentStylePath)) {
                    this.error(`Component "${comp.name}" style scss file missing "${componentStylePath}"`);
                }
            }
            // generic files
            for (const file of GENERIC_FILES) {
                if (!this.filePaths.has(file)) {
                    this.error(`File "${file}" is missing`);
                }
            }
        });
    }
}
exports.ComponentsValidator = ComponentsValidator;
//# sourceMappingURL=components-validator.js.map