"use strict";
/**
 * Validates if group components exist
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupsValidator = void 0;
const validator_1 = require("./validator");
class GroupsValidator extends validator_1.Validator {
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateGroupsList(this.componentSet.groups);
        });
    }
    /**
     * Validate a list of groups.
     *
     * @param errorReporter
     * @param parsedGroup
     */
    validateGroupsList(groups) {
        const groupNames = new Set();
        for (const group of groups) {
            this.validateGroup(group);
            if (groupNames.has(group.name)) {
                this.error(`Component group "${group.name}" is not unique`);
            }
            groupNames.add(group.name);
        }
    }
    /**
     * Validate a single parsed group.
     *
     * @param errorReporter
     * @param parsedGroup
     */
    validateGroup(group) {
        for (const componentName of group.components) {
            if (!(componentName in this.componentSet.components)) {
                this.error(`Component "${componentName}" of group "${group.name}" does not exist`);
            }
        }
    }
}
exports.GroupsValidator = GroupsValidator;
//# sourceMappingURL=groups-validator.js.map