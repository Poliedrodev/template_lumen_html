"use strict";
/**
 * Validates usage of doc-media directive
 *
 * Rules:
 *  - A component is not allowed to have more than one doc-media directive.
 *  - A component with 1 doc-media directives -must- have a property control type "media-properties"
 *  - A component property with a "media-properties" control type MUST be applied to a "media" directive
 *  - A component without a doc-media directive can't have any "media-properties" control types
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocMediaValidator = void 0;
const validator_1 = require("./validator");
const models_1 = require("../models");
class DocMediaValidator extends validator_1.Validator {
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            Object.values(this.componentSet.components).forEach((c) => this.validateComponent(c));
        });
    }
    validateComponent(component) {
        const numMediaDirectives = this.countMediaDirectives(component);
        if (numMediaDirectives === 0) {
            this.validateComponentWithoutMediaDirective(component);
            return;
        }
        if (numMediaDirectives > 1) {
            this.error(`Component "${component.name}" can only have one "doc-media" directive in the HTML definition`);
            return;
        }
        this.validateComponentWithMediaDirective(component);
    }
    validateComponentWithoutMediaDirective(component) {
        if (this.countMediaPropertiesProperties(component) > 0) {
            this.error(`Component "${component.name}" has a "media-properties" control type, but only components with a "doc-media" directive can have a property with this control type`);
        }
    }
    validateComponentWithMediaDirective(component) {
        if (this.countMediaPropertiesProperties(component) !== 1) {
            this.error(`Component "${component.name}" with "doc-media" directive must have exactly one "media-properties" property (found ${this.countMediaPropertiesProperties(component)})`);
            return;
        }
        // Check whether the media-properties control type property is applied to the doc-media directive.
        for (const mediaProperty of Object.values(this.mediaPropertiesProperties(component))) {
            this.validateMediaProperty(component, mediaProperty);
        }
    }
    validateMediaProperty(component, mediaProperty) {
        if (!mediaProperty.directiveKey) {
            this.error(`Component "${component.name}" must configure "directiveKey" for the property with control type "media-properties"`);
            return;
        }
        const directive = component.directives[mediaProperty.directiveKey];
        if (!directive || directive.type !== models_1.DirectiveType.media) {
            this.error(`Component "${component.name}" has a control type "media-properties" applied to the wrong directive, which can only be used with "doc-media" directives`);
        }
    }
    countMediaDirectives(component) {
        return Object.values(component.directives).filter((directive) => directive.type === models_1.DirectiveType.media).length;
    }
    /** Count number of "media-properties" properties */
    countMediaPropertiesProperties(component) {
        return this.mediaPropertiesProperties(component).length;
    }
    /** Get "media-properties" properties definitions (collection of nested properties behaving as a single property) */
    mediaPropertiesProperties(component) {
        return Object.values(component.properties).filter((property) => property.control.type === 'media-properties');
    }
}
exports.DocMediaValidator = DocMediaValidator;
//# sourceMappingURL=doc-media-validator.js.map