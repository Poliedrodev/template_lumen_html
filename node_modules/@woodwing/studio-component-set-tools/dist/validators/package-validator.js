"use strict";
/**
 * Validates component package size:
 * - Maximum number of files in the component set.
 * - Maximum total file size of the component set.
 * - Maximum number of files in the custom data folder.
 * - Maximum total file size of the custom data folder.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTotalSize = exports.PackageValidator = void 0;
const validator_1 = require("./validator");
const MAX_COMPONENT_SET_FILE_COUNT = 5000;
const MAX_COMPONENT_SET_SIZE_MB = 100;
const MAX_CUSTOM_DATA_FILE_COUNT = 1000;
const MAX_CUSTOM_DATA_SIZE_MB = 20;
const MB_IN_BYTES = 1 * 1000 * 1000;
class PackageValidator extends validator_1.Validator {
    constructor(error, definition, filePaths, getFileSize) {
        super(error, definition);
        this.filePaths = filePaths;
        this.getFileSize = getFileSize;
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const files = [];
            for (const filePath of Array.from(this.filePaths)) {
                const fileSize = yield this.getFileSize(filePath);
                files.push({
                    path: filePath,
                    size: fileSize,
                });
            }
            this.validateComponentSetFileCount(files);
            this.validateComponentSetSize(files);
            this.validateCustomData(files);
        });
    }
    validateComponentSetSize(files) {
        const folderSize = this.calculateFolderSize(files);
        const error = validateTotalSize(folderSize);
        if (error) {
            this.error(error);
        }
    }
    validateComponentSetFileCount(files) {
        if (files.length > MAX_COMPONENT_SET_FILE_COUNT) {
            this.error(`At ${files.length} files, the component set exceeds the total maximum amount of ${MAX_COMPONENT_SET_FILE_COUNT} files.`);
        }
    }
    validateCustomData(files) {
        const customDataFiles = files.filter((file) => file.path.toLowerCase().startsWith('custom/'));
        this.validateCustomDataFileCount(customDataFiles);
        this.validateCustomDataSize(customDataFiles);
    }
    validateCustomDataFileCount(files) {
        if (files.length > MAX_CUSTOM_DATA_FILE_COUNT) {
            this.error(`At ${files.length} files, the 'custom' folder exceeds the maximum amount of ${MAX_CUSTOM_DATA_FILE_COUNT} files.`);
        }
    }
    validateCustomDataSize(files) {
        const folderSize = Math.round(this.calculateFolderSize(files) / MB_IN_BYTES);
        if (folderSize > MAX_CUSTOM_DATA_SIZE_MB) {
            this.error(`At ${folderSize}MB, the 'custom' folder exceeds the maximum size of ${MAX_CUSTOM_DATA_SIZE_MB}MB.`);
        }
    }
    calculateFolderSize(files) {
        return files.reduce((acc, file) => {
            return acc + file.size;
        }, 0);
    }
}
exports.PackageValidator = PackageValidator;
function validateTotalSize(size) {
    const sizeMB = Math.round(size / MB_IN_BYTES);
    if (sizeMB > MAX_COMPONENT_SET_SIZE_MB) {
        return `At ${sizeMB}MB, the component set exceeds the total maximum size of ${MAX_COMPONENT_SET_SIZE_MB}MB.`;
    }
}
exports.validateTotalSize = validateTotalSize;
//# sourceMappingURL=package-validator.js.map