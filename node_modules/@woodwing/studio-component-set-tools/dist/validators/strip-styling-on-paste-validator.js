"use strict";
/**
 * Validates stripStylingOnPaste directive option
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StripStylingOnPasteValidator = void 0;
const validator_1 = require("./validator");
class StripStylingOnPasteValidator extends validator_1.Validator {
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const component of Object.values(this.componentSet.components)) {
                this.validateComponent(component);
            }
        });
    }
    /**
     * Validates whether stripStylingOnPaste is set for an editable directive.
     */
    validateComponent(component) {
        if (!component.directiveOptions) {
            return;
        }
        for (const [key, directiveOptions] of Object.entries(component.directiveOptions)) {
            // Only for directives with stripStylingOnPaste option
            if (directiveOptions.stripStylingOnPaste === undefined)
                continue;
            if (!this.validateDirectiveExists(key, component))
                continue;
            this.validateDirectiveType(key, component);
        }
    }
    validateDirectiveExists(directiveKey, component) {
        const directive = component.directives[directiveKey];
        if (directive)
            return true;
        this.error(`Component "${component.name}" has stripStylingOnPaste set for an unknown directive "${directiveKey}".`);
        return false;
    }
    validateDirectiveType(directiveKey, component) {
        const directive = component.directives[directiveKey];
        if (directive.type === 'editable')
            return;
        this.error(`Component "${component.name}" has stripStylingOnPaste set for a directive with key "${directiveKey}" but that directive is not of type "editable". Instead it is of type "${directive.type}".`);
    }
}
exports.StripStylingOnPasteValidator = StripStylingOnPasteValidator;
//# sourceMappingURL=strip-styling-on-paste-validator.js.map