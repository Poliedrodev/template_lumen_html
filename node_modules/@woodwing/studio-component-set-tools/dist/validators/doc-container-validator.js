"use strict";
/**
 * Validates usage of doc-container directive
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocContainerValidator = void 0;
const validator_1 = require("./validator");
const models_1 = require("../models");
class DocContainerValidator extends validator_1.Validator {
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            Object.values(this.componentSet.components).forEach((component) => {
                const containerCount = this.countContainerDirectives(component);
                const slideshowCount = this.countSlideshowDirectives(component);
                // check if there is not more than one doc-container
                // and it cannot be combined with slideshow directives
                if (containerCount > 1) {
                    this.error(`Component "${component.name}" can only have one container directive`);
                }
                else if (containerCount === 1 && slideshowCount > 0) {
                    this.error(`Component "${component.name}" contains both a container and slideshow directive,` +
                        `but can only contain one of those directive types`);
                }
            });
        });
    }
    countContainerDirectives(component) {
        return Object.values(component.directives).filter((directive) => directive.type === models_1.DirectiveType.container)
            .length;
    }
    countSlideshowDirectives(component) {
        return Object.values(component.directives).filter((directive) => directive.type === models_1.DirectiveType.slideshow)
            .length;
    }
}
exports.DocContainerValidator = DocContainerValidator;
//# sourceMappingURL=doc-container-validator.js.map